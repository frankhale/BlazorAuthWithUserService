@page "/secret"
@using System.Security.Claims
@rendermode InteractiveWebAssembly
@* @inject AuthenticationStateProvider AuthenticationStateProvider *@

@attribute [Authorize]

<AuthorizeView>
    <Authorized>
        <h1>Hello, @context.User.Identity?.Name!</h1>
        <div>
            <b>User Claims</b>
            <ul>
                <li>Name - @context.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value</li>
                <li>Email - @context.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value</li>
                <li>Role - @context.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value</li>
                <li>Jwt - @((context.User.Claims.FirstOrDefault(c => c.Type == "Jwt")?.Value)?[..10])...</li>
            </ul>
        </div>
        
        <p>This is a secret page for authorized users only!</p>
    </Authorized>
    
    <NotAuthorized>
        Not Authorized
    </NotAuthorized>
</AuthorizeView>

@code {
    
    // protected override async Task OnInitializedAsync()
    // {
    //     var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //     var user = authState.User;
    // }

}
