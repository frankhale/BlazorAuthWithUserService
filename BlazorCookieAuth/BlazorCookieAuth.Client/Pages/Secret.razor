@page "/secret"
@rendermode InteractiveWebAssembly

@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]

<AuthorizeView Roles="User">
    <Authorized>
        <h1>Hello, @user.Identity?.Name!</h1>
        <div>
            <b>User Claims</b>
            <ul>
                <li>Id - @user.Claims.FirstOrDefault(c => c.Type == "id")?.Value</li>
                <li>Name - @user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value</li>
                <li>Email - @user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value</li>
                <li>Role - @user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value</li>
                <li>Jwt - @((user.Claims.FirstOrDefault(c => c.Type == "jwt")?.Value)?[..10])...</li>
            </ul>
        </div>
        
        <p>This is a secret page for authorized users only!</p>
    </Authorized>
    
    <NotAuthorized>
        Not Authorized
    </NotAuthorized>
</AuthorizeView>

@code {
    private ClaimsPrincipal user;
    
    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authenticationState.User;
    }

}
